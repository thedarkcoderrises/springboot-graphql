input PersonVO
{
 name: String
 age: Int
 dob: String
 sex: String
 addLine1: String
 addLine2: String
 city: String
 state: String
 country: Country
 type: VehicleType
 modelCode: String
 brandName: String
 launchDate: String
 formattedDate: String
 engineType: EngineType
}

#type Person {
# uid: Int
# name: String
# age: Int
# dob: String
# sex: String
# addressId: Int!
# vehicleId: Int!
#}

type Address {
 addressId: Int!
 addLine1: String
 addLine2: String
 city: String
 state: String
 country: Country
}

type Vehicle {
 vehicleId: Int!
 type: VehicleType
 modelCode: String
 brandName: String
 launchDate: String
 formattedDate: String
 engineType: EngineType
}

enum Country {
 IND
 NON_IND
}

enum VehicleType {
 CAR
 BIKE
 CYCLE
}

enum EngineType {
 BATTERY
 TWO_STROKE
 FOUR_STROKE
}

type Person {
 uid: Int
 name: String
 age: Int
 dob: String
 sex: String
 address: Address
 vehicle: Vehicle
}

type Query {
	person(uid: Int): Person
	address(addressId: Int): Address
	vehicle(vehicleId: Int): Vehicle
	persons: [Person]
}

type Mutation {
	createPerson(input: PersonVO):Person
}