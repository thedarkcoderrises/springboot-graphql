input PersonInput
{
 name: String
 age: Int
 dob: String
 sex: String
 addLine1: String
 addLine2: String
 city: String
 state: String
 country: Country
 type: VehicleType
 modelCode: String
 brandName: String
 launchDate: String
 formattedDate: String
 engineType: EngineType
}

type Person {
 name: String
 age: Int
 dob: String
 sex: String
 address: Address
 vehicle: Vehicle
}

type Address {
 addLine1: String
 addLine2: String
 city: String
 state: String
 country: Country
}

type Vehicle {
 type: VehicleType
 modelCode: String
 brandName: String
 launchDate: String
 formattedDate: String
 engineType: EngineType
}

enum Country {
 IND
 NON_IND
}

enum VehicleType {
 CAR
 BIKE
 CYCLE
}

enum EngineType {
 BATTERY
 TWO_STROKE
 FOUR_STROKE
}


type Query {
	persons(count: Int):[Person]
	person(name: String):Person
	personOnAddress(input: PersonInput):[Person]
}

type Mutation {
	createPerson(input: PersonInput):Person
}